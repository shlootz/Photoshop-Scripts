#target photoshopapp.bringToFront();var cs2 = parseInt(app.version) < 10;var originalDoc;try {	doc = app.activeDocument;} catch (ignored) {}var defaultSettings = {        reels:5,        symbolsPerReel:3,        symbolWidth:200,        symbolHeight:100,        symbolsHorizontalGap:5,        symbolsVerticalGap:5,        initX:0,        initY:0,        reelDeviders:false,        nearMiss:false,        generateGuides:false    };var strtRulerUnits = app.preferences.rulerUnits;  var strtTypeUnits = app.preferences.typeUnits;  app.preferences.rulerUnits = Units.PIXELS;  app.preferences.typeUnits = TypeUnits.PIXELS;  var newLayerSet;//var Colour = new SolidColor;  //Colour.rgb.hexValue = 'ff00ff';  var Colour_LINE = new SolidColor;  Colour_LINE.rgb.hexValue = '0cff00';  var Colour_REELS = new SolidColor;  Colour_REELS.rgb.hexValue = '19e7e5';  var Colour_SYMBOL = new SolidColor;  Colour_SYMBOL.rgb.hexValue = 'ff0000';  var Colour_CENTER = new SolidColor;  Colour_CENTER.rgb.hexValue = 'ffffff';  var Colour_STROKE = new SolidColor;  Colour_STROKE.rgb.hexValue = 'ff00ff';  var Colour_AREA = new SolidColor;  Colour_AREA.rgb.hexValue = 'ffa800';  //doc.layers.itemByName("test"); //run();showSettingsDialog();function run(){    if(!defaultSettings.generateGuides) {        newLayerSet = doc.layerSets.add();           newLayerSet.name = "TECHNICAL_LAYER";        layerColour("red");    }     var w = defaultSettings.symbolWidth;     var h = defaultSettings.symbolHeight;     var x = defaultSettings.initX;     var y = defaultSettings.initY;     //generate symbols gridif(!defaultSettings.generateGuides){    //reels area    var reelAreaLayer = doc.artLayers.add();          reelAreaLayer.move(newLayerSet, ElementPlacement.INSIDE);          reelAreaLayer.name = "Tech_REELS_AREA"+"_noExport";        reelAreaLayer.opacity = 20;        layerColour("red");        drawRect(x, y, w*defaultSettings.reels+defaultSettings.symbolsHorizontalGap*(defaultSettings.reels-1), h*defaultSettings.symbolsPerReel+(defaultSettings.symbolsVerticalGap)*(defaultSettings.symbolsPerReel-1), Colour_AREA);               //lines  for (var j = 0; j < defaultSettings.symbolsPerReel; j++) {       var linesLayer = doc.artLayers.add();          linesLayer.move(newLayerSet, ElementPlacement.INSIDE);          linesLayer.name = "Tech_LINE_"+String(j+1)+"_noExport";        linesLayer.opacity = 20;        layerColour("red");        drawRect(x, y+j*(h + defaultSettings.symbolsVerticalGap), w*defaultSettings.reels+defaultSettings.symbolsHorizontalGap*(defaultSettings.reels-1), h, Colour_LINE);      }    //reels  for (var i = 0; i < defaultSettings.reels; i++) {        var reelLayer = doc.artLayers.add();          reelLayer.move(newLayerSet, ElementPlacement.INSIDE);          reelLayer.name = "Tech_REEL_"+String(i+1)+"_noExport";        reelLayer.opacity = 20;        layerColour("red");        drawRect(x+i*(w + defaultSettings.symbolsHorizontalGap), y, w, (h)*defaultSettings.symbolsPerReel+(defaultSettings.symbolsVerticalGap)*(defaultSettings.symbolsPerReel-1), Colour_REELS);          }           var symbolID = 0;              for (var i = 0; i < defaultSettings.reels; i++) {       //symbols        for (var j = 0; j < defaultSettings.symbolsPerReel; j++) {            symbolID ++            var myLayer = doc.artLayers.add();              myLayer.move(newLayerSet, ElementPlacement.INSIDE);              myLayer.name = "Tech_Symbol_"+String(symbolID)+"_noExport";            myLayer.opacity = 20;            layerColour("red");            drawRect(x+i*(w + defaultSettings.symbolsHorizontalGap), y+j*(h + defaultSettings.symbolsVerticalGap), w, h, Colour_SYMBOL);        }    }}//generate guidesif(defaultSettings.generateGuides){    for (var m=0; m<defaultSettings.symbolsPerReel; m++){            guideLine(y+m*(h + defaultSettings.symbolsVerticalGap), "Hrzn");            guideLine(y+m*(h + defaultSettings.symbolsVerticalGap)+h, "Hrzn");        }         for (var n=0; n<defaultSettings.reels; n++){            guideLine(x+n*(w + defaultSettings.symbolsHorizontalGap), "Vrtc");            guideLine(x+n*(w + defaultSettings.symbolsHorizontalGap)+w, "Vrtc");        }    }}function drawRect(x, y, w, h, color) {    activeDocument.selection.select([[x, y], [x+w, y], [x+w, y+h], [x,y+h]], SelectionType.REPLACE, 0, false);      activeDocument.selection.stroke(Colour_STROKE, 1, StrokeLocation.INSIDE,ColorBlendMode.NORMAL,100);      activeDocument.selection.fill(color, ColorBlendMode.NORMAL, 100);    activeDocument.selection.deselect();          makeCircle(x+w/2 - 2,y+h/2 - 2, x+w/2 + 2, y+h/2 + 2, false);    activeDocument.selection.stroke (Colour_CENTER, 1, StrokeLocation.INSIDE,ColorBlendMode.NORMAL,100, true);     activeDocument.selection.deselect();  }function makeCircle(left,top,right,bottom,antiAlias){var circleSelection = charIDToTypeID( "setd" );    var descriptor = new ActionDescriptor();    var id71 = charIDToTypeID( "null" );        var ref5 = new ActionReference();        var id72 = charIDToTypeID( "Chnl" );        var id73 = charIDToTypeID( "fsel" );        ref5.putProperty( id72, id73 );    descriptor.putReference( id71, ref5 );    var id74 = charIDToTypeID( "T   " );        var desc12 = new ActionDescriptor();        var top1 = charIDToTypeID( "Top " );        var top2 = charIDToTypeID( "#Pxl" );        desc12.putUnitDouble( top1, top2, top );        var left1 = charIDToTypeID( "Left" );        var left2 = charIDToTypeID( "#Pxl" );        desc12.putUnitDouble( left1, left2, left );        var bottom1 = charIDToTypeID( "Btom" );        var bottom2 = charIDToTypeID( "#Pxl" );        desc12.putUnitDouble( bottom1, bottom2, bottom );        var right1 = charIDToTypeID( "Rght" );        var right2 = charIDToTypeID( "#Pxl" );        desc12.putUnitDouble( right1, right2, right );    var id83 = charIDToTypeID( "Elps" );    descriptor.putObject( id74, id83, desc12 );    var id84 = charIDToTypeID( "AntA" );    descriptor.putBoolean( id84, antiAlias );executeAction( circleSelection, descriptor, DialogModes.NO );}function showSettingsDialog () {        // Layout.	var dialog = new Window("dialog", "Chtulhu Grid Generator"), group;	dialog.alignChildren = "fill";        var outputPathGroup = dialog.add("panel", undefined, "Output Paths");		outputPathGroup.alignChildren = ["fill", ""];		outputPathGroup.margins = [10,15,10,10];		var v1, v2, v3, v4, v5, v6, v7, v8;			var textGroup = outputPathGroup.add("group");			textGroup.orientation = "column";			textGroup.alignChildren = ["fill", ""];			            group = textGroup.add("group");            				group.add("statictext", undefined, "Nr. of Reels:");				v1 = group.add("edittext", undefined, defaultSettings.reels);				v1.alignment = ["fill", ""];                                  group.add("statictext", undefined, "Nr. of symbols per reel:");				v2 = group.add("edittext", undefined, defaultSettings.symbolsPerReel);				v2.alignment = ["fill", ""];                             group = textGroup.add("group");            				group.add("statictext", undefined, "Symbol Width");				v3 = group.add("edittext", undefined, defaultSettings.symbolWidth);				v3.alignment = ["fill", ""];                                  group.add("statictext", undefined, "Symbol Height");				v4 = group.add("edittext", undefined, defaultSettings.symbolHeight);				v4.alignment = ["fill", ""];                                group = textGroup.add("group");               				group.add("statictext", undefined, "Reels gap");				v5 = group.add("edittext", undefined, defaultSettings.symbolsHorizontalGap);				v5.alignment = ["fill", ""];                                  group.add("statictext", undefined, "Symbols gap");				v6 = group.add("edittext", undefined, defaultSettings.symbolsVerticalGap);				v6.alignment = ["fill", ""];                                  group = textGroup.add("group");               				group.add("statictext", undefined, "Start Position X");				v7 = group.add("edittext", undefined, defaultSettings.initX);				v7.alignment = ["fill", ""];                                  group.add("statictext", undefined, "Start Position Y");				v8 = group.add("edittext", undefined, defaultSettings.initY);				v8.alignment = ["fill", ""];                                        			imagesDirPreview = textGroup.add("statictext", undefined, "");			imagesDirPreview.maximumSize.width = 260;			group = textGroup.add("group");                     var checkboxGroup = outputPathGroup.add("group");         checkboxGroup.alignChildren = ["left", "top"];		group = checkboxGroup.add("group");	     group.orientation = "column";		group.alignChildren = ["left", ""];		var generateGuides = group.add("checkbox", undefined, " Generate Guides ONLY");		generateGuides.value = defaultSettings.generateGuides;                            var buttonGroup = dialog.add("group");		group = buttonGroup.add("group");			group.alignment = ["fill", ""];			group.alignChildren = ["right", ""];			var runButton = group.add("button", undefined, "OK");			var cancelButton = group.add("button", undefined, "Cancel");                      runButton.onClick = function () {                                defaultSettings.reels = Number(v1.text);                defaultSettings.symbolsPerReel = Number(v2.text);                defaultSettings.symbolWidth = Number(v3.text);                defaultSettings.symbolHeight = Number(v4.text);                defaultSettings.symbolsHorizontalGap = Number(v5.text);                defaultSettings.symbolsVerticalGap = Number(v6.text);                defaultSettings.initX = Number(v7.text);                defaultSettings.initY = Number(v8.text);                defaultSettings.generateGuides = generateGuides.value;                                 run();                                        $.writeln(defaultSettings.reels);                $.writeln(defaultSettings.symbolsPerReel);                $.writeln(defaultSettings.symbolWidth);                $.writeln(defaultSettings.symbolHeight);                $.writeln(defaultSettings.symbolsHorizontalGap);                $.writeln(defaultSettings.symbolsVerticalGap);                                dialog.close();              }                    cancelButton.onClick = function(){                cancel = true;                dialog.close();                return;              }                      try {		dialog.add("image", undefined, new File(scriptDir() + "logo.png"));	} catch (ignored) {}         dialog.center();	 dialog.show();    }//types: Vrtc Hrznfunction guideLine(position, type) {    var id296 = charIDToTypeID( "Mk  " );        var desc50 = new ActionDescriptor();        var id297 = charIDToTypeID( "Nw  " );            var desc51 = new ActionDescriptor();            var id298 = charIDToTypeID( "Pstn" );            var id299 = charIDToTypeID( "#Pxl" );            desc51.putUnitDouble( id298, id299, position );            var id300 = charIDToTypeID( "Ornt" );            var id301 = charIDToTypeID( "Ornt" );            var id302 = charIDToTypeID( type );           desc51.putEnumerated( id300, id301, id302 );           var id303 = charIDToTypeID( "Gd  " );        desc50.putObject( id297, id303, desc51 );    executeAction( id296, desc50, DialogModes.NO ); };function layerColour(colour) {      switch (colour.toLocaleLowerCase()){          case 'red': colour = 'Rd  '; break;          case 'orange' : colour = 'Orng'; break;          case 'yellow' : colour = 'Ylw '; break;          case 'yellow' : colour = 'Ylw '; break;          case 'green' : colour = 'Grn '; break;          case 'blue' : colour = 'Bl  '; break;          case 'violet' : colour = 'Vlt '; break;          case 'gray' : colour = 'Gry '; break;          case 'none' : colour = 'None'; break;          default : colour = 'None'; break;          }      var desc = new ActionDescriptor();          var ref = new ActionReference();          ref.putEnumerated( charIDToTypeID('Lyr '), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );      desc.putReference( charIDToTypeID('null'), ref );          var desc2 = new ActionDescriptor();          desc2.putEnumerated( charIDToTypeID('Clr '), charIDToTypeID('Clr '), charIDToTypeID(colour) );      desc.putObject( charIDToTypeID('T   '), charIDToTypeID('Lyr '), desc2 );      executeAction( charIDToTypeID('setd'), desc, DialogModes.NO );  };  